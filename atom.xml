<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>njafei&#39;s blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/njafei/njafei.github.io/"/>
  <updated>2017-03-27T07:31:33.000Z</updated>
  <id>https://github.com/njafei/njafei.github.io/</id>
  
  <author>
    <name>njafei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apple文档翻译之UIResponder</title>
    <link href="https://github.com/njafei/njafei.github.io/2017/03/21/UIResponder/"/>
    <id>https://github.com/njafei/njafei.github.io/2017/03/21/UIResponder/</id>
    <published>2017-03-21T07:20:54.000Z</published>
    <updated>2017-03-27T07:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>UIResponder</code>是回应和处理事件的抽象接口,<code>UIResponder</code>的实例，包括：<code>UIApplication</code>、<code>UIViewController</code>、<code>UIView</code>（包含<code>UIWindow</code>），组成了<code>UIKit</code>处理事件的核心。当事件发生时，<code>UIKit</code>会把事件派发给<code>UIResponder</code>去处理。</p>
<p>有许多种事件，包括触摸、手势、遥控和点击事件。为了处理特定的事件，一个<code>responder</code>（响应）必须重写<code>corresponding</code>方法。比如，要想处理<code>touch</code>事件，一个<code>responder</code>要实现<code>touchesBegan：withEvent</code>,<code>touchedMoved:withEvent:</code>等方法。在触摸事件的列子中，<code>responder</code>使用UIKit提供的事件信息来追踪触摸的改变，然后适时地更新界面。</p>
<p>除了处理事件，<code>UIKit responder</code>还负责转发那边没有被处理的事件给app的其他部分。如果一个指定的<code>responder</code>没有处理事件，它就会转发这个事件到响应链的下一个<code>responder</code>。UIKit动态地管理响应链，使用预定的规则来决定下一个收到事件的对象。比如：一个<code>view</code>转发事件到它的<code>superView</code>，或者<code>Rootview</code>转发事件给它的v<code>iew controller</code>。</p>
<p><code>Responder</code>处理<code>UIEvent</code>和其他通过输入界面的自定义输入，最典型的就是系统的键盘。当用户点击<code>UITextField</code>和<code>UITextView</code>，这个view变成了第一个<code>responder</code>，然后展示它的输入界面：键盘。同样的，你可以创造一个自定义的输入界面，然后在其他<code>responders</code>活跃的时候展示它。为了把输入界面和<code>responder</code>联系在一起，要把<code>view</code>赋值给<code>responder</code>的属性。</p>
<p>原文链接  <a href="https://developer.apple.com/reference/uikit/uiresponder#//apple_ref/occ/cl/UIResponder" target="_blank" rel="external">UIResponder</a></p>
<p>如果有任何建议和优化的地方，欢迎给我留言。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;UIResponder&lt;/code&gt;是回应和处理事件的抽象接口,&lt;code&gt;UIResponder&lt;/code&gt;的实例，包括：&lt;code&gt;UIApplication&lt;/code&gt;、&lt;code&gt;UIViewController&lt;/code&gt;、&lt;code&gt;UIVie
    
    </summary>
    
      <category term="文档翻译" scheme="https://github.com/njafei/njafei.github.io/categories/%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/"/>
    
    
  </entry>
  
  <entry>
    <title>github pages + hexo 原理探究</title>
    <link href="https://github.com/njafei/njafei.github.io/2017/03/18/githubPagesStudy/"/>
    <id>https://github.com/njafei/njafei.github.io/2017/03/18/githubPagesStudy/</id>
    <published>2017-03-18T13:07:15.000Z</published>
    <updated>2017-03-18T13:17:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>利用一个下午搭建起了github pages + hexo 的静态博客，试用了下效果，还是挺满意的，至少比csdn的页面好看多了，哈哈。<br>搭建的过程中，也遇到了很多的问题，尤其是中间如何把hexo 和github连在一起，又是如何更新博客这块，有很多疑问，我自己尝试，还不小心把本地的hexo的文件删除了，不得不重新init了一个，配置都要重新来一遍，所以这篇文章着重探讨，github pages的流程到底是如何展开的。</p>
<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>先说下<a href="https://pages.github.com/" target="_blank" rel="external">github pages</a>,github pages 是github提供给用户用来展示个人或者项目主页的静态网页系统。每个用户都可以使用自己的github项目创建，上传静态页面的html文件，github会帮你自动更新你的页面。</p>
<p><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">hexo</a>是一个用来生成静态界面的框架，使用hexo，你就可以直接使用mark down 来写文章，而不用关心前端样式的展现。</p>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>我们来看下流程图：<br><img src="http://on0hv7n2x.bkt.clouddn.com/github%20pages%20%E6%95%B0%E6%8D%AE%E6%B5%81.png" alt="数据流程图"></p>
<p>这样看就很简单了，我们本地使用markDown语法写好文件，然后执行hexo或者其他静态网页生成工具，生成好静态文件，然后使用hexo等工具的发布功能，就会使用ssh来更新github项目的文件，即生成一个新的commit然后push。github检测到这个项目更新，就会更新你的网站的内容（会有缓存）。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;缘起&quot;&gt;&lt;a href=&quot;#缘起&quot; class=&quot;headerlink&quot; title=&quot;缘起&quot;&gt;&lt;/a&gt;缘起&lt;/h2&gt;&lt;p&gt;利用一个下午搭建起了github pages + hexo 的静态博客，试用了下效果，还是挺满意的，至少比csdn的页面好看多了，哈哈。&lt;b
    
    </summary>
    
    
      <category term="闲来研究" scheme="https://github.com/njafei/njafei.github.io/tags/%E9%97%B2%E6%9D%A5%E7%A0%94%E7%A9%B6/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/njafei/njafei.github.io/2017/03/17/hello-world/"/>
    <id>https://github.com/njafei/njafei.github.io/2017/03/17/hello-world/</id>
    <published>2017-03-17T08:38:44.000Z</published>
    <updated>2017-03-17T08:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
